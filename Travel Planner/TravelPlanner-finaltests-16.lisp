(defun test1 ()
(format t "The next testcases call Travelers-Dilemma")
(terpri)
(print-eval '(
(TravelPlannerAgent "newark" "bangor" 'goal-test-TP? 'successors-TP 'get-goal-estimate-TP)))

(terpri)
(format t "******************************************************")
(terpri)
(print-eval '(
   (TravelPlannerAgent "denver" "westpalm" 'goal-test-TP? 'successors-TP 'get-goal-estimate-TP)))

(terpri)
(format t "******************************************************")
(terpri)
(print-eval '(
   (TravelPlannerAgent "westpalm" "boston" 'goal-test-TP? 'successors-TP 'get-goal-estimate-TP)))

(terpri)
(format t "******************************************************")
(terpri)
(print-eval '(
   (TravelPlannerAgent "memphis" "westpalm" 'goal-test-TP? 'successors-TP 'get-goal-estimate-TP)))

(terpri)
(format t "******************************************************")
(terpri)
(print-eval '(
   (TravelPlannerAgent "westpalm" "ithaca" 'goal-test-TP? 'successors-TP 'get-goal-estimate-TP)))

(terpri)
(format t "******************************************************")
(terpri)
(print-eval '(
   (TravelPlannerAgent "roanoke" "losangeles" 'goal-test-TP? 'successors-TP 'get-goal-estimate-TP)))

(terpri)
(format t "******************************************************")
(terpri)
(print-eval '(
   (TravelPlannerAgent "denver" "ithaca" 'goal-test-TP? 'successors-TP 'get-goal-estimate-TP)))


(terpri)
(format t "******************************************************")
(terpri)
(format t "Now test update-node-closed")
(terpri)
   (setf stlouis (intern "Node-stlouis"))
   (setf phil (intern "Node-philadelphia"))
   (setf boston (intern "Node-boston"))
   (setf bangor (intern "Node-bangor"))
   (setf ithaca (intern "Node-ithaca"))
   (setf la (intern "Node-losangeles"))
   (setf pitt (intern "Node-pittsburgh"))
   (setf westpalm (intern "Node-westpalm"))
   (setf baltimore (intern "Node-baltimore"))
   (setf (get stlouis 'parent) nil)
   (setf (get phil 'parent) stlouis)
   (setf (get boston 'parent) stlouis)   
   (setf (get bangor 'parent) boston)
   (setf (get ithaca 'parent) bangor)
   (setf (get la 'parent) boston)
   (setf (get westpalm 'parent) boston)
   (setf (get pitt 'parent) westpalm)
   (setf (get baltimore 'parent) westpalm)
   (setf (get stlouis 'best-path-cost) 0)
   (setf (get phil 'best-path-cost) 1304)
   (setf (get boston 'best-path-cost) 1674)
   (setf (get bangor 'best-path-cost) 2024)
   (setf (get la 'best-path-cost) 5850)
   (setf (get ithaca 'best-path-cost) 2697)
   (setf (get westpalm 'best-path-cost) 4558.5)
   (setf (get pitt 'best-path-cost) 6058.5)
   (setf (get baltimore 'best-path-cost) 5992.5)
   (setf (get stlouis 'cost-to-goal-estimate) 1239)
   (setf (get phil 'cost-to-goal-estimate) 299)
   (setf (get boston 'cost-to-goal-estimate) 446)
   (setf (get bangor 'cost-to-goal-estimate) 673)
   (setf (get ithaca 'cost-to-goal-estimate) 0)
   (setf (get la 'cost-to-goal-estimate) 3730)
   (setf (get westpalm 'cost-to-goal-estimate) 1779)
   (setf (get pitt 'cost-to-goal-estimate) 365)
   (setf (get baltimore 'cost-to-goal-estimate) 350)
   (setf (get stlouis 'least-cost-estimate) 1239)   
   (setf (get phil 'least-cost-estimate) 1603)
   (setf (get boston 'least-cost-estimate) 2120)
   (setf (get bangor 'least-cost-estimate) 2697)
   (setf (get ithaca 'least-cost-estimate) 2697)
   (setf (get la 'least-cost-estimate) 9580)
   (setf (get westpalm 'least-cost-estimate) 6337.5)
   (setf (get pitt 'least-cost-estimate) 6423.5)
   (setf (get baltimore 'least-cost-estimate) 6342.5)
   (setf (get stlouis 'state) "stlouis")
   (setf (get phil 'state) "philadelphia")
   (setf (get boston 'state) "boston")
   (setf (get bangor 'state) "bangor")
   (setf (get ithaca 'state) "ithaca")
   (setf (get la 'state) "losangeles")
   (setf (get westpalm 'state) "westpalm")
   (setf (get pitt 'state) "pittsburgh")
   (setf (get baltimore 'state) "baltimore")
   (setf (get stlouis 'action) nil)
   (setf (get phil 'action) '("philadelphia" FLY))
   (setf (get boston 'action) '("boston" FLY))
   (setf (get bangor 'action) '("bangor" FLY))
   (setf (get ithaca 'action) '("ithaca" FLY))
   (setf (get la 'action) '("losangeles" FLY))
   (setf (get westpalm 'action) '("westpalm" TAKE-TRAIN))
   (setf (get pitt 'action) '("pittsburgh" FLY))
   (setf (get baltimore 'action) '("baltimore" FLY))
   (setq newnode (intern "Node-boston"))
   (setq parent phil)
   (setq cost-of-short-path 1500)
   (setq action '("boston" TAKE-BUS))
   (setq open (list ithaca baltimore pitt la))
   (setq closed (list phil bangor westpalm boston stlouis ))
   (terpri)
   (format t "The starting closed list is ~A" closed)
   (print-properties closed)
   (terpri)
   (format t "The starting open list is ~A" open)
   (print-properties open)   
   (terpri)
   (format t "The new node is ~A with a better path cost" newnode)
   (terpri)
   (format t "Now call update-node-closed")
   (terpri)
   (setq open-closed (list open closed))
   (format t "The open-closed list is ~A" open-closed)
   (terpri)
(update-node-closed newnode parent 'successors-TP cost-of-short-path action open-closed)
   (terpri)
   (format t "The updated closed list is ~A" closed)
   (terpri)
   (print-properties closed)
   (terpri)
   (format t "The updated open list is ~A" open)
   (terpri)
   (print-properties open)
   )

(defun print-properties (lst)
; lst is a list of nodes
; prints the properties of the nodes
(cond ((null lst) nil)
      (t
      (terpri)
      (format t "Properties of ~A follow" (car lst))
      (terpri) 
      (format t "best-path-cost is ~A" (get (car lst) 'best-path-cost))
      (terpri)          
      (format t "cost-to-goal-estimate is ~A" (get (car lst) 'cost-to-goal-estimate))
      (terpri) 
      (format t "least-cost-estimate is ~A" (get (car lst) 'least-cost-estimate))
      (terpri)  
      (format t "action is ~A" (get (car lst) 'action))
      (terpri)  
      (format t "parent is ~A" (get (car lst) 'parent))
      (terpri)  
      (format t "city is ~A" (get (car lst) 'state))
      (terpri)
      (print-properties (cdr lst)))))

        

